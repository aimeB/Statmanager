package com.genesis.api.statmanager.dto.global;

import com.genesis.api.statmanager.model.enumeration.PointJoueur;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Data
@NoArgsConstructor
@AllArgsConstructor
public class StatistiquesChampionnatDTO extends StatistiquesRencontreDTO {
    private Long championnatId;
    private int butsChamp = 0;
    private int passesChamp = 0;
    private double coteChamp = 5.0;
    private double minutesJoueesChamp = 0.0;
    private int pointsChamp;

    // üìå Ajout des statistiques sp√©cifiques aux gardiens
    private int butArreterChamp = 0;  // ü•Ö Nombre d'arr√™ts r√©alis√©s par un gardien
    private int butEncaisserChamp = 0; // üö® Nombre de buts encaiss√©s
    private int cleanSheet = 0; // üèÜ Nombre de matchs sans encaisser de but (clean sheets)







    // Constructeur avec les param√®tres n√©cessaires
    // ‚úÖ Constructeur modifi√© pour inclure les nouvelles stats
    public StatistiquesChampionnatDTO(Long championnatId, Long joueurId, String nom, String poste,
                                      int butsChamp, int passesChamp, double coteChamp, double minutesJoueesChamp,
                                      int pointsChamp, int butArreterChamp, int butEncaisserChamp, int cleanSheet) {
        this.championnatId = championnatId;
        this.joueurId = joueurId;
        this.nom = nom;
        this.poste = poste;
        this.butsChamp = butsChamp;
        this.passesChamp = passesChamp;
        this.coteChamp = coteChamp;
        this.minutesJoueesChamp = minutesJoueesChamp;
        this.pointsChamp = pointsChamp;
        this.butArreterChamp = butArreterChamp;
        this.butEncaisserChamp = butEncaisserChamp;
        this.cleanSheet = cleanSheet;
    }












    // M√©thode pour calculer les statistiques d'un joueur dans un championnat sp√©cifique
    public static StatistiquesChampionnatDTO fromChampionnat(List<StatistiquesRencontreDTO> statsRencontres, Long championnatId) {
        log.info("üìå D√©but de l‚Äôagr√©gation des statistiques du championnat ID={}", championnatId);

        StatistiquesChampionnatDTO statsChamp = new StatistiquesChampionnatDTO();
        statsChamp.championnatId = championnatId;

        if (statsRencontres.isEmpty()) {
            log.warn("‚ö†Ô∏è Aucun match trouv√© pour le championnat ID={}", championnatId);
            return statsChamp;
        }

        int totalButs = 0;
        int totalPasses = 0;
        double totalMinutes = 0;
        double totalCotePonderee = 0;
        int totalPoints = 0;
        int totalArrets = 0;
        int totalButsEncaisses = 0;
        int totalCleanSheets = 0;

        for (StatistiquesRencontreDTO stats : statsRencontres) {
            log.info("üìä Joueur={} | Poste={} | Buts={} | Passes={} | Minutes={} | Cote={} | Points={} | Arr√™ts={} | Buts Encaiss√©s={}",
                    stats.getJoueurId(), stats.getPoste(), stats.getButs(), stats.getPasses(),
                    stats.getMinutesJouees(), stats.getCote(), stats.getPoints(),
                    stats.getButArreter(), stats.getButEncaisser());


            totalButs += stats.getButs();
            totalPasses += stats.getPasses();
            totalMinutes += stats.getMinutesJouees();
            totalPoints += stats.getPoints();
            totalArrets += stats.getButArreter();
            totalButsEncaisses += stats.getButEncaisser();
            // ‚úÖ Stockage du poste depuis le premier √©l√©ment (car tous les joueurs de ce championnat ont le m√™me poste)
            statsChamp.setPoste(stats.getPoste());
            // ‚úÖ Cote pond√©r√©e en fonction du temps jou√©
            totalCotePonderee += stats.getCote() * stats.getMinutesJouees();

            // ‚úÖ Un clean sheet est ajout√© si un gardien a jou√© et n‚Äôa encaiss√© aucun but
            if ("GB".equalsIgnoreCase(stats.getPoste()) && stats.getButEncaisser() == 0) {
                totalCleanSheets++;
            }
        }




        statsChamp.butsChamp = totalButs;
        statsChamp.passesChamp = totalPasses;
        statsChamp.minutesJoueesChamp = totalMinutes;

        // ‚úÖ Cote moyenne pond√©r√©e calcul√©e correctement
        statsChamp.coteChamp = (totalMinutes > 0) ? totalCotePonderee / totalMinutes : 5.0;

        statsChamp.pointsChamp = totalPoints;
        statsChamp.butArreterChamp = totalArrets;
        statsChamp.butEncaisserChamp = totalButsEncaisses;
        statsChamp.cleanSheet = totalCleanSheets;

        log.info("‚úÖ Statistiques calcul√©es pour championnat ID={} | Poste={} | Total Buts={} | Total Passes={} | Total Minutes={} | Cote Pond√©r√©e={} | Total Points={} | Arr√™ts={} | Buts Encaiss√©s={} | Clean Sheets={}",
                championnatId, statsRencontres.get(0).getPoste(), totalButs, totalPasses, totalMinutes, statsChamp.coteChamp, totalPoints, totalArrets, totalButsEncaisses, totalCleanSheets);



        return statsChamp;
    }







    public static void attribuerPointsFinalChampionnat(List<StatistiquesChampionnatDTO> statsChampionnat) {
        log.info("üìå D√©but de l‚Äôattribution des points finaux pour le championnat.");

        statsChampionnat.sort((a, b) -> Integer.compare(b.getPointsChamp(), a.getPointsChamp()));

        for (int i = 0; i < statsChampionnat.size(); i++) {
            StatistiquesChampionnatDTO joueur = statsChampionnat.get(i);
            PointJoueur pointsAttribues;

            if (i == 0) {
                pointsAttribues = PointJoueur.FIRST;
            } else if (i == 1) {
                pointsAttribues = PointJoueur.SECOND;
            } else if (i == 2) {
                pointsAttribues = PointJoueur.THIRD;
            } else if (i < 4) {
                pointsAttribues = PointJoueur.MOTION;
            } else {
                pointsAttribues = PointJoueur.NULL;
            }

            log.info("üèÜ Attribution des points - Joueur ID={} | Classement={} | Points Actuels={} | Points Attribu√©s={}",
                    joueur.getJoueurId(), i + 1, joueur.getPointsChamp(), pointsAttribues.getValue());

            joueur.setPointsChamp(joueur.getPointsChamp() + pointsAttribues.getValue());
        }

        log.info("‚úÖ Fin de l‚Äôattribution des points finaux.");
    }





}

package com.genesis.api.statmanager.service.impl;

import com.genesis.api.statmanager.dto.StatChampionnatDTO;
import com.genesis.api.statmanager.dto.global.StatistiquesRencontreDTO;
import com.genesis.api.statmanager.model.Championnat;
import com.genesis.api.statmanager.model.StatChampionnat;
import com.genesis.api.statmanager.projection.JoueurProjection;
import com.genesis.api.statmanager.repository.ChampionnatRepository;
import com.genesis.api.statmanager.repository.JoueurRepository;
import com.genesis.api.statmanager.repository.StatChampionnatRepository;
import com.genesis.api.statmanager.service.StatChampionnatService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * üìå Impl√©mentation du service de gestion des statistiques des joueurs dans un championnat.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class StatChampionnatServiceImpl implements StatChampionnatService {

    private final StatChampionnatRepository statChampionnatRepository;
    private final ChampionnatRepository championnatRepository;
    private final JoueurRepository joueurRepository;

    // =========================================================================
    // üîπ SECTION 1 : R√âCUP√âRATION DES STATISTIQUES
    // =========================================================================

    @Override
    public List<StatChampionnatDTO> findAllAsDTO() {
        return statChampionnatRepository.findAll()
                .stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    @Override
    public Optional<StatChampionnatDTO> findByJoueurAndChampionnatAsDTO(Long joueurId, Long championnatId) {
        Championnat championnat = championnatRepository.findById(championnatId)
                .orElseThrow(() -> new IllegalArgumentException("‚ùå Championnat non trouv√© avec ID : " + championnatId));

        return statChampionnatRepository.findByJoueurIdAndChampionnat(joueurId, championnat)
                .map(this::mapToDTO);
    }

    @Override
    public List<StatChampionnatDTO> findByJoueurAsDTO(Long joueurId) {
        return statChampionnatRepository.findByJoueurId(joueurId)
                .stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    @Override
    public List<StatChampionnatDTO> findByChampionnatAsDTO(Long championnatId) {
        Championnat championnat = championnatRepository.findById(championnatId)
                .orElseThrow(() -> new IllegalArgumentException("‚ùå Championnat non trouv√© avec ID : " + championnatId));

        return statChampionnatRepository.findByChampionnat(championnat)
                .stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    /**
     * üìå R√©cup√®re le classement des meilleurs joueurs dans un championnat selon un crit√®re sp√©cifique.
     */
    @Override
    public List<StatChampionnatDTO> getTopJoueurs(Long idChampionnat, String critere) {
        Championnat championnat = championnatRepository.findById(idChampionnat)
                .orElseThrow(() -> new IllegalArgumentException("‚ùå Championnat non trouv√© avec ID : " + idChampionnat));

        return statChampionnatRepository.findByChampionnat(championnat).stream()
                .sorted((a, b) -> switch (critere) {
                    case "buts" -> Integer.compare(b.getButsChamp(), a.getButsChamp());
                    case "passes" -> Integer.compare(b.getPassesChamp(), a.getPassesChamp());
                    case "cote" -> Double.compare(b.getMoyenneCoteChamp(), a.getMoyenneCoteChamp());
                    default -> 0;
                })
                .limit(10)
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    // =========================================================================
    // üîπ SECTION 2 : MISE √Ä JOUR DES STATISTIQUES
    // =========================================================================

    /**
     * üîÑ Met √† jour les statistiques d'un joueur apr√®s une rencontre.
     */
    @Override
    @Transactional
    public void mettreAJourStatistiques(Long idChampionnat, List<StatistiquesRencontreDTO> statsRencontres) {
        Championnat championnat = championnatRepository.findById(idChampionnat)
                .orElseThrow(() -> new IllegalArgumentException("‚ùå Championnat non trouv√© avec ID : " + idChampionnat));

        statsRencontres.forEach(stats -> {
            Long joueurId = stats.getJoueurId();

            // ‚úÖ R√©cup√©ration de la stat existante en base
            StatChampionnat statChampionnat = statChampionnatRepository.findByJoueurIdAndChampionnat(joueurId, championnat)
                    .orElseThrow(() -> new IllegalStateException("‚ùå StatChampionnat manquante pour Joueur ID=" + joueurId));

            // ‚úÖ Mise √† jour des statistiques cumul√©es
            statChampionnat.setButsChamp(statChampionnat.getButsChamp() + stats.getButs());
            statChampionnat.setPassesChamp(statChampionnat.getPassesChamp() + stats.getPasses());
            statChampionnat.setMinutesJoueesChamp(statChampionnat.getMinutesJoueesChamp() + stats.getMinutesJouees());

            // ‚úÖ Mise √† jour de la moyenne de la cote avec une pond√©ration
            if (statChampionnat.getMinutesJoueesChamp() > 0) {
                double totalMinutes = statChampionnat.getMinutesJoueesChamp() + stats.getMinutesJouees();
                statChampionnat.setMoyenneCoteChamp(((statChampionnat.getMoyenneCoteChamp() * statChampionnat.getMinutesJoueesChamp()) +
                        (stats.getCote() * stats.getMinutesJouees())) / totalMinutes);
            }

            statChampionnatRepository.save(statChampionnat);
            log.info("‚úÖ Stat mise √† jour pour JoueurID={} | Buts={} | Passes={} | Minutes={} | Cote={}",
                    joueurId, statChampionnat.getButsChamp(), statChampionnat.getPassesChamp(),
                    statChampionnat.getMinutesJoueesChamp(), statChampionnat.getMoyenneCoteChamp());
        });

        log.info("‚úÖ Mise √† jour des statistiques du championnat termin√©e pour ID={}", idChampionnat);
    }


    // =========================================================================
    // üîπ SECTION 3 : CONVERSIONS ET MAPPERS
    // =========================================================================

    /**
     * üìå Convertit une entit√© StatChampionnat en StatChampionnatDTO.
     */
    private StatChampionnatDTO mapToDTO(StatChampionnat stat) {
        JoueurProjection joueurProjection = joueurRepository.findJoueurProjectionById(stat.getJoueurId())
                .orElseThrow(() -> new IllegalArgumentException("‚ùå Joueur introuvable pour ID=" + stat.getJoueurId()));

        return new StatChampionnatDTO(
                stat.getId(),
                stat.getJoueurId(),  // ‚úÖ On utilise `joueurId`
                joueurProjection.getNom(),  // ‚úÖ On r√©cup√®re le nom via la projection
                stat.getChampionnat().getIdChamp(),
                stat.getButsChamp(),
                stat.getPassesChamp(),
                stat.getMinutesJoueesChamp(),
                stat.getMoyenneCoteChamp()
        );
    }
}

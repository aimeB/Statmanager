package com.genesis.api.statmanager.dto.global;

import com.genesis.api.statmanager.dto.FeuilleDeMatchDTO;
import com.genesis.api.statmanager.dto.rencontre.ClotureRencontreDTO;
import com.genesis.api.statmanager.model.FeuilleDeMatch;
import com.genesis.api.statmanager.model.Joueur;
import com.genesis.api.statmanager.model.enumeration.Poste;
import com.genesis.api.statmanager.projection.FeuilleDeMatchProjection;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.*;
import java.util.stream.Collectors;



import lombok.extern.slf4j.Slf4j;

@Slf4j
@Data
@NoArgsConstructor
@AllArgsConstructor
public class StatistiquesRencontreDTO extends StatistiquesDTO {
    private Long rencontreId;
    private double minutesJouees;
    private List<Long> idPasseurs;
    private List<String> nomPasseurs;


    public double getButsParMinute() {
        return (minutesJouees > 0) ? (double) buts / minutesJouees : 0;
    }

    public double getPassesParMinute() {
        return (minutesJouees > 0) ? (double) passes / minutesJouees : 0;
    }

    public double getPointsParMinute() {
        return (minutesJouees > 0) ? (double) points / minutesJouees : 0;
    }




    // M√©thode pour agr√©ger les statistiques de la rencontre
    public static StatistiquesRencontreDTO fromFeuilleDeMatch(FeuilleDeMatchDTO feuilleDeMatch) {
        log.info("üìå Conversion FeuilleDeMatchDTO ‚Üí StatistiquesRencontreDTO | Joueur={} | Buts={} | Passes={} | Cote avant correction={}",
                feuilleDeMatch.getJid(), feuilleDeMatch.getButs(), feuilleDeMatch.getPasses(), feuilleDeMatch.getCote());

        StatistiquesRencontreDTO stats = new StatistiquesRencontreDTO();
        stats.setRencontreId(feuilleDeMatch.getRid());
        stats.setJoueurId(feuilleDeMatch.getJid());
        stats.setMinutesJouees(feuilleDeMatch.getMinutesJouees());
        stats.setButs(feuilleDeMatch.getButs());
        stats.setPasses(feuilleDeMatch.getPasses());

        stats.setIdPasseurs(feuilleDeMatch.getPasseursId());
        stats.setNomPasseurs(feuilleDeMatch.getNomsPasseurs());

        // ‚úÖ Assurer que le poste est bien stock√©
        String posteFinal = feuilleDeMatch.getPoste() != null ? feuilleDeMatch.getPoste() : "INCONNU";
        stats.setPoste(posteFinal);
        stats.setCote(feuilleDeMatch.getCote());  // ‚úÖ Mettre √† jour la cote dans StatistiquesRencontreDTO

        log.info("üìå Cote mise √† jour pour Joueur={} | Nouvelle Cote={}", feuilleDeMatch.getJid(), feuilleDeMatch.getCote());

        // ‚úÖ Calcul des points
        int points = (feuilleDeMatch.getButs() * 4) +
                (feuilleDeMatch.getPasses() * 3) +
                ((int) (feuilleDeMatch.getMinutesJouees() * 0.02)) +
                ((int) (feuilleDeMatch.getCote() * 2)); // üî• Utiliser la nouvelle cote pour les points

        // ‚úÖ Ajustement pour d√©fenseurs et gardiens
        if ("D√©fenseur".equalsIgnoreCase(stats.getPoste()) || "Gardien".equalsIgnoreCase(stats.getPoste())) {
            points -= feuilleDeMatch.getButEncaisser();
            if (feuilleDeMatch.getButEncaisser() == 0) {
                points += 5;
            }
        }

        stats.setPoints(points);

        log.info("üìå Stats apr√®s attribution des points (fromFeuilleDeMatch)  | Joueur={} | Points={} | Buts={} | Passes={} | Minutes Jou√©es={} | Cote Finale={}  | Poste={}",
                feuilleDeMatch.getJid(), stats.getPoints(), stats.getButs(), stats.getPasses(), stats.getMinutesJouees(), stats.getCote(), stats.getPoste());

        return stats;
    }






    public static StatistiquesRencontreDTO fromFeuilleDeMatchEntity(FeuilleDeMatch feuilleDeMatch, Poste poste) {
        StatistiquesRencontreDTO stats = new StatistiquesRencontreDTO();
        stats.setRencontreId(feuilleDeMatch.getRencontre().getRid());
        stats.setJoueurId(feuilleDeMatch.getJid());
        stats.setMinutesJouees(feuilleDeMatch.getMinutesJouees());
        stats.setButs(feuilleDeMatch.getButs());
        stats.setPasses(feuilleDeMatch.getPasses());
        stats.setCote(feuilleDeMatch.getCote());

        // üö® V√©rification stricte pour √©viter `null`
        if (poste == null) {
            throw new IllegalStateException("‚ùå ERREUR CRITIQUE : Le poste est null pour Joueur ID=" + feuilleDeMatch.getJid());
        }
        stats.setPoste(poste.name());

        // ‚úÖ Calcul des points
        int points = (feuilleDeMatch.getButs() * 4) +
                (feuilleDeMatch.getPasses() * 3) +
                ((int) (feuilleDeMatch.getMinutesJouees() * 0.02)) +
                ((int) (feuilleDeMatch.getCote() * 2));

        // ‚úÖ Malus et bonus pour d√©fenseurs/gardiens
        if (poste.isDefensif() || poste.isGardien()) {
            points -= feuilleDeMatch.getButEncaisser();
            if (feuilleDeMatch.getButEncaisser() == 0) {
                points += 5;
            }
        }

        stats.setPoints(points);
        return stats;
    }






    // üìå Mise √† jour pour inclure les stats sp√©cifiques aux gardiens
    public static StatistiquesRencontreDTO fromFeuilleDeMatchProjection(FeuilleDeMatchProjection feuilleProjection) {
        StatistiquesRencontreDTO stats = new StatistiquesRencontreDTO();

        stats.setJoueurId(feuilleProjection.getJid());
        stats.setRencontreId(feuilleProjection.getRid());
        stats.setMinutesJouees(feuilleProjection.getMinutesJouees());
        stats.setButs(feuilleProjection.getButs());
        stats.setPasses(feuilleProjection.getPasses());
        stats.setCote(feuilleProjection.getCote());
        stats.setIdPasseurs(parsePasseurs(feuilleProjection.getPasseursIds()));
        stats.setNomPasseurs(parseNomsPasseurs(feuilleProjection.getNomsPasseurs()));
        stats.setButEncaisser(feuilleProjection.getButEncaisser());
        stats.setButArreter(feuilleProjection.getButArreter());

        // üö® V√©rification stricte pour √©viter `null`
        String posteFinal = feuilleProjection.getPoste();
        if (posteFinal == null || posteFinal.isEmpty()) {
            throw new IllegalStateException("‚ùå ERREUR CRITIQUE : Le poste est null pour Joueur ID=" + feuilleProjection.getJid());
        }
        stats.setPoste(posteFinal);

        int points = feuilleProjection.getButs() * 3 + feuilleProjection.getPasses();

        if (stats.getPoste().equalsIgnoreCase("Gardien")) {
            points += feuilleProjection.getButArreter() * 2;
            points -= feuilleProjection.getButEncaisser();
        }

        stats.setPoints(points);

        log.info("üìå Stats apr√®s conversion | Joueur={} | Poste={} | Points={} | Buts Arr√™t√©s={} | Buts Encaiss√©s={}",
                stats.getJoueurId(), stats.getPoste(), stats.getPoints(), stats.getButArreter(), stats.getButEncaisser());

        return stats;
    }





    public StatistiquesRencontreDTO(Long joueurId, String nom, String typeJoueur, String poste,
                                    Integer buts, double butsParMinute, Integer passes, double passesParMinute,
                                    double moyenneButsPasses, Double cote, int points, int pointsParMinute,
                                    double totalMinutesJouees, int butArreter, int butEncaisser,
                                    Long rencontreId, List<Long> idPasseurs, List<String> nomPasseurs) {
        this.joueurId = joueurId;
        this.nom = nom;
        this.typeJoueur = typeJoueur;
        this.poste = poste;
        this.buts = buts != null ? buts : 0;  // ‚úÖ Correction pour √©viter les `null`
        this.passes = passes != null ? passes : 0;
        this.cote = cote != null ? cote : 5.0; // ‚úÖ Valeur par d√©faut
        this.points = points;
        this.totalMinutesJouees = totalMinutesJouees;
        this.butArreter = butArreter;  // ‚úÖ Ajout des buts arr√™t√©s
        this.butEncaisser = butEncaisser;  // ‚úÖ Ajout des buts encaiss√©s
        this.rencontreId = rencontreId;
        this.idPasseurs = idPasseurs != null ? idPasseurs : new ArrayList<>();
        this.nomPasseurs = nomPasseurs != null ? nomPasseurs : new ArrayList<>();
    }




    // Constructeur avec tous les param√®tres n√©cessaires
    public StatistiquesRencontreDTO(Long joueurId, String nom, String typeJoueur, String poste,
                                    Integer buts, double butsParMinute, Integer passes, double passesParMinute,
                                    double moyenneButsPasses, Double cote, int points, int pointsParMinute,
                                    Double totalMinutesJouees, Long rencontreId, List<Long> idPasseurs,
                                    List<String> nomPasseurs) {
        this.joueurId = joueurId;
        this.nom = nom;
        this.typeJoueur = typeJoueur;
        this.poste = poste;
        this.buts = buts;
        this.passes = passes;
        this.cote = cote;
        this.points = points;
        this.totalMinutesJouees = totalMinutesJouees;
        this.rencontreId = rencontreId;
        this.idPasseurs = idPasseurs;
        this.nomPasseurs = nomPasseurs;
    }



    public static Long determinerHommeDuMatch(List<StatistiquesRencontreDTO> statsRencontres) {
        log.info("üìå D√©termination de l‚ÄôHomme du Match | Nombre de joueurs en comp√©tition : {}", statsRencontres.size());

        if (statsRencontres.isEmpty()) {
            log.warn("‚ö†Ô∏è Aucun joueur dans la liste pour HOM !");
            return null;
        }

        statsRencontres.forEach(joueur ->
                log.info("üìä Joueur={} | Points={}", joueur.getJoueurId(), joueur.getPoints()));

        Long hommeDuMatchId = statsRencontres.stream()
                .max(Comparator.comparingInt(StatistiquesRencontreDTO::getPoints))
                .map(StatistiquesRencontreDTO::getJoueurId)
                .orElse(null);

        if (hommeDuMatchId != null) {
            log.info("üèÜ Homme du Match s√©lectionn√© : Joueur ID={}", hommeDuMatchId);
        } else {
            log.warn("‚ö†Ô∏è Aucun joueur n‚Äôa √©t√© s√©lectionn√© comme Homme du Match !");
        }

        return hommeDuMatchId;
    }













    private static List<Long> parsePasseurs(String passeursIds) {
        if (passeursIds != null && !passeursIds.isEmpty()) {
            return Arrays.stream(passeursIds.split(","))
                    .map(Long::parseLong)
                    .collect(Collectors.toList());
        } else {
            return new ArrayList<>();
        }
    }

    private static List<String> parseNomsPasseurs(String nomsPasseurs) {
        if (nomsPasseurs != null && !nomsPasseurs.isEmpty()) {
            return Arrays.asList(nomsPasseurs.split(","));
        } else {
            return new ArrayList<>();
        }
    }














}
